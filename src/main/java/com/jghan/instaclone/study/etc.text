package config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

import static org.hibernate.criterion.Restrictions.and;

@EnableWebSecurity //해당 파일로 시큐리티 활성화
@Configuration //IOC에 등록
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
            .antMatchers("/", "/user/**", "/image/**", "/subscribe/**", "/comment/**").authenticated() //인증이 필요한 url
            .anyRequest().permitAll(); //어떤 요청이라도 허용.
//        .and()
//                .formLogin()
//                .loginPage("/auth/signin")
//                .defaultSuccessUrl("/")
//
//        http
//                .authorizeRequests()
//                .antMatchers("/", "/user/**", "/image/**", "/subscribe/**", "/comment/**").authenticated() //인증이 필요한 url
//                .anyRequest().permitAll(); //어떤 요청이라도 허용.
//


    }
}
spring.jpa.properties.hibernate.format_sql=true

#spring.jpa.open-in-view=true
##서버 재가동할때마다 DB내용 유지, Create는 다 지우기
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.show-sql=true
#
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.max-file-size=2MB
##spring.security.user.name=test
##spring.security.user.password=1234
#
#file.path=C:/workspace/springbootwork/upload/
